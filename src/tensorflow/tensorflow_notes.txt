Feb 7th 2020
------------
train_data_size = 800
python train.py --trainfiles '../../pf_net/tf/data/valid.tfrecords' --batch_size 4 --learningrate 0.0001 --epochs 20 --num_particles 30 --trajlen 24

python eval.py --load './logs/20210207-141027/train/chks/checkpoint_19_0.686/pfnet_checkpoint' --testfiles '../../pf_net/tf/data/valid.tfrecords' --batch_size 8 --epochs 1 --num_particles 300 --trajlen 24

results:
Mean RMSE (average RMSE per trajectory) = 62.236 cm
Overall RMSE (reported value) = 66.730 cm
Success rate = 17.000 %


Feb 8th 2020
------------
train_data_size = 16000
nohup python train.py --trainfiles '../../pf_net/tf/data/train.tfrecords' --batch_size 4 --learningrate 0.0001 --epochs 20 --num_particles 30 --trajlen 24 &


Feb 12th 2020
-------------
train_dataset_size = 1000
valid_dataset_size = 200
run_validation = True
nohup python train.py --trainfiles '../../data/train.tfrecords' --testfiles '../../data/valid.tfrecords' --batch_size 4 --learningrate 0.0001 --epochs 100 --num_particles 30 --trajlen 24 &


Feb 15th 2020
-------------
python eval.py --load './logs/20210212-192446/test/chks/checkpoint_75_0.391/pfnet_checkpoint' --testfiles '../../data/test.tfrecords' --batch_size 8 --epochs 1 --num_particles 300 --trajlen 24 --gpu_num 0

results:
Mean RMSE (average RMSE per trajectory) = 48.832 cm
Overall RMSE (reported value) = 52.539 cm
Success rate = 38.000 %
--------------------------------------------------------------------------------
python eval.py --load './logs/20210212-192446/test/chks/checkpoint_75_0.391/pfnet_checkpoint' --testfiles '../../data/test.tfrecords' --batch_size 8 --epochs 1 --num_particles 500 --trajlen 24 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --gpu_num 0

results:
Mean RMSE (average RMSE per trajectory) = 55.890 cm
Overall RMSE (reported value) = 64.430 cm
Success rate = 34.000 %

Feb 16th 2020
-------------
python eval.py --load './logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint' --testfiles '../../data/test.tfrecords' --batch_size 8 --epochs 1 --num_particles 300 --trajlen 24 --gpu_num 0

results:
Mean RMSE (average RMSE per trajectory) = 46.365 cm
Overall RMSE (reported value) = 50.251 cm
Success rate = 47.000 %
--------------------------------------------------------------------------------
python eval.py --load './logs/20210212-192446/train/chks/checkpoint_99_0.389/pfnet_checkpoint' --testfiles '../../data/test.tfrecords' --batch_size 8 --epochs 1 --num_particles 300 --trajlen 24 --gpu_num 0

results:
Mean RMSE (average RMSE per trajectory) = 58.229 cm
Overall RMSE (reported value) = 63.134 cm
Success rate = 24.000 %
--------------------------------------------------------------------------------
python eval.py --load './logs/20210212-192446/test/chks/checkpoint_98_0.231/pfnet_checkpoint' --testfiles '../../data/test.tfrecords' --batch_size 8 --epochs 1 --num_particles 300 --trajlen 24 --gpu_num 0

results:
Mean RMSE (average RMSE per trajectory) = 46.379 cm
Overall RMSE (reported value) = 50.581 cm
Success rate = 45.000 %
--------------------------------------------------------------------------------
python display_results.py --load ./logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint --testfiles ../../data/test.tfrecords --batch_size 1 --epochs 1 --num_particles 3000 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'one-room' --gpu_num 0

results:
Mean RMSE (average RMSE per trajectory) = 281.185 cm
Overall RMSE (reported value) = 447.164 cm
Success rate = 0.000 %
--------------------------------------------------------------------------------

Feb 17th 2020
-------------
nohup python display_results.py --load ./logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint --testfiles ../../data/test.tfrecords --batch_size 1 --epochs 1 --num_particles 500 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'one-room' --gpu_num 0 --seed 100 > display_results0.out &

results:
Mean RMSE (average RMSE per trajectory) = 182.863 cm
Overall RMSE (reported value) = 194.275 cm
Success rate = 0.000 %
Video = output_500
--------------------------------------------------------------------------------
nohup python display_results.py --load ./logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint --testfiles ../../data/test.tfrecords --batch_size 1 --epochs 1 --num_particles 1000 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'one-room' --gpu_num 1 --seed 100 > display_results2.out &

results:
Mean RMSE (average RMSE per trajectory) = 212.844 cm
Overall RMSE (reported value) = 220.640 cm
Success rate = 0.000 %
Video = output_1000
--------------------------------------------------------------------------------
nohup python display_results.py --load ./logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint --testfiles ../../data/test.tfrecords --batch_size 1 --epochs 1 --num_particles 3000 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'one-room' --gpu_num 0 --seed 100 > display_results1.out &

results:
Mean RMSE (average RMSE per trajectory) = 220.021 cm
Overall RMSE (reported value) = 233.153 cm
Success rate = 0.000 %
Video = output_3000
--------------------------------------------------------------------------------
nohup python eval.py --load './logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint' --testfiles '../../data/test.tfrecords' --batch_size 8 --epochs 1 --num_particles 500 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'one-room' --gpu_num 0 > evaluation_results0.out &

Mean RMSE (average RMSE per trajectory) = 278.398 cm
Overall RMSE (reported value) = 314.782 cm
Success rate = 0.000 %

--------------------------------------------------------------------------------

=======================================
TODO:
1. train with igibson dataset
2. amcl api
3. train RL agent on trained pfnet
=======================================

Feb 21st 2020
-------------

train_dataset_size = 1000
valid_dataset_size = 200
run_validation = True
nohup python train.py --batch_size 4 --learningrate 0.0001 --epochs 100 --num_particles 30 --trajlen 24 --gpu_num 0 --agent 'random' > training_results0.out &

python display_results.py --pfnet_load ../pfnet/bckp/logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint --batch_size 1 --epochs 1 --num_particles 500 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'uniform' --gpu_num 0 --seed 100

Feb 22nd 2020
-------------
python eval.py --pfnet_load ../pfnet/bckp/logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint --testfiles './data/test/test.tfrecord' --batch_size 1 --epochs 1 --num_particles 500 --trajlen 24 --seed 98

nohup python display_results.py --pfnet_load './logs/20210212-192446/test/chks/checkpoint_90_0.289/pfnet_checkpoint' --testfiles './data/test/test.tfrecord' --batch_size 1 --epochs 1 --seed 98 --num_particles 3000 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'uniform' --gpu_num 1 > display_results0.out &

nohup python display_results.py --pfnet_load './logs/20210222-001755/test/chks/checkpoint_33_0.293/pfnet_checkpoint' --testfiles './data/test/test.tfrecord' --batch_size 1 --epochs 1 --seed 98 --num_particles 1000 --trajlen 100 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '0.04' '0.0872665' --init_particles_distr 'uniform' --gpu_num 1 > display_results0.out &


=======================================
TODO:
1. check for bug in visualization/code
2. overfit -> train and eval on same data -> manual data
3. trained agent point navigation task
=======================================


Feb 24th 2020
-------------
train_dataset_size = 200
valid_dataset_size = 40
run_validation = True
nohup python train.py --trainfiles './data/train/*.tfrecord' --testfiles './data/valid/*.tfrecord' --batch_size 4 --learningrate 0.0001 --epochs 100 --num_particles 30 --trajlen 24 --gpu_num 0 > training_results0.out &


Feb 25th 2020
-------------
1. Verified transition model -> without observation model and resampling should produce zero loss
2. Verified and fixed transformlocalmap model -> need to convert co-ordinate space to pixel space and global map is already inverted
3. Verified and fixed gt_pose and random particles in pixel space

train_dataset_size = 200
valid_dataset_size = 40
run_validation = True
nohup python train.py --batch_size 4 --learningrate 0.0001 --epochs 100 --num_particles 30 --trajlen 24 --gpu_num 0 --agent 'random' --gpu_num 0 > training_results0.out &


Mar 1st 2020
-------------
train_dataset_size = 400
valid_dataset_size = 40
obstacle_map
nohup python train.py --pfnet_load './checkpoint_90_0.289/pfnet_checkpoint' --trainfiles './data/train/*.tfrecord' --testfiles './data/train/*.tfrecord' --batch_size 4 --learningrate 0.0001 --epochs 100 --num_particles 30 --trajlen 24 --gpu_num 1 > training_results0.out &


Mar 2nd 2020
-------------
obstacle_map
num_test_batches = 2
nohup python display_results.py --pfnet_load './checkpoint_90_0.289/pfnet_checkpoint' --testfiles './data/test/*.tfrecord' --batch_size 1 --epochs 1 --seed 98 --num_particles 500 --trajlen 50 --resample 'true' --alpha_resample_ratio 1.0 --transition_std '2' '0.0872665' --init_particles_distr 'gaussian' --gpu_num 1 > display_results0.out &


Mar 3rd 2021
------------
1. increase the testing data trajlen to see if the model collapse
2. take the mode instead of mean for evaluation
3. rl agent only for localization task input: rgb + fixed num particles & weights -> with guassian distr


Mar 17th 2021
-------------
1. baseline agent for igibson navigation task ->
  read the paper
  start with fixed start and end
  with only robot state
  use MlpPolicy for RL agent
2. log the loss of train rl agent

Mar 24th 2021
-------------
1. Eval and Reward during training PPO, try different agents
2. set squashoutput=True, ent_coef=0.01, discount factor 1.0 and <1.0
3. cross verify action is with in action_space range


Mar 31th 2021
-------------
1. collect manual data and override replay buffer
2. experiment with exploration parameters like ent_coef=0.1
3. try to use easy start and goal position

April 7th 2021
--------------
1. rgb + robot state + goal position -> navigation
2. rgb + robot state (linear & angular vel) + particles (mean est position) -> localization
    reward: 1. negative loglikelihood
            2. mse gt_position vs est_position mean
            3. checkout deep active localization paper for other reward function

April 14th 2021
---------------
1. decrease even further goal positions
2. increase episode length to 1000
3. increase linear layer capacity
